Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> code
Rule 2     code -> code stmt
Rule 3     code -> stmt
Rule 4     stmt -> sys_config ENDL
Rule 5     stmt -> def_const ENDL
Rule 6     stmt -> def_array ENDL
Rule 7     stmt -> def_restr ENDL
Rule 8     sys_config -> SHARP NAME DOTS NUMBER
Rule 9     sys_config -> SHARP NAME DOTS STRING
Rule 10    def_const -> NAME ASSIGN literal
Rule 11    literal -> NUMBER
Rule 12    literal -> NAME
Rule 13    def_array -> NAME shape ASSIGN array_buffer
Rule 14    def_array -> NAME shape
Rule 15    shape -> shape index
Rule 16    shape -> index
Rule 17    index -> LBRA literal RBRA
Rule 18    array_buffer -> LCUR array RCUR
Rule 19    array -> array COMMA array_item
Rule 20    array -> array_item
Rule 21    array_item -> array_index DOTS literal
Rule 22    array_index -> LPAR literal_seq RPAR
Rule 23    literal_seq -> literal_seq COMMA literal
Rule 24    literal_seq -> literal
Rule 25    def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops expr
Rule 26    def_restr -> LPAR NAME RPAR NAME DOTS loops expr
Rule 27    loops -> loops loop
Rule 28    loops -> loop
Rule 29    loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR
Rule 30    loop -> quant LCUR NAME ASSIGN domain RCUR
Rule 31    quant -> FORALL
Rule 32    quant -> EXISTS
Rule 33    quant -> EXISTS_ONE
Rule 34    domain -> LBRA literal DOTS literal DOTS literal RBRA
Rule 35    domain -> LBRA literal DOTS literal RBRA
Rule 36    conditions -> conditions COMMA condition
Rule 37    conditions -> condition
Rule 38    condition -> expr EQ expr
Rule 39    condition -> expr GT expr
Rule 40    condition -> expr LT expr
Rule 41    condition -> expr GE expr
Rule 42    condition -> expr LE expr
Rule 43    condition -> expr NE expr
Rule 44    condition -> expr
Rule 45    expr -> literal
Rule 46    expr -> NOT expr
Rule 47    expr -> ADD expr
Rule 48    expr -> SUB expr
Rule 49    expr -> expr AND expr
Rule 50    expr -> expr OR expr
Rule 51    expr -> expr XOR expr
Rule 52    expr -> expr ADD expr
Rule 53    expr -> expr SUB expr
Rule 54    expr -> expr MUL expr
Rule 55    expr -> expr DIV expr
Rule 56    expr -> expr IMP expr
Rule 57    expr -> expr RIMP expr
Rule 58    expr -> expr IFF expr
Rule 59    expr -> expr LBRA expr RBRA
Rule 60    expr -> LPAR expr RPAR

Terminals, with rules where they appear

ADD                  : 47 52
AND                  : 49
ASSIGN               : 10 13 29 30
COMMA                : 19 23 29 36
DIV                  : 55
DOTS                 : 8 9 21 25 26 34 34 35
ENDL                 : 4 5 6 7
EQ                   : 38
EXISTS               : 32
EXISTS_ONE           : 33
FORALL               : 31
GE                   : 41
GT                   : 39
IFF                  : 58
IMP                  : 56
LBRA                 : 17 34 35 59
LCUR                 : 18 29 30
LE                   : 42
LPAR                 : 22 25 26 60
LT                   : 40
MUL                  : 54
NAME                 : 8 9 10 12 13 14 25 25 26 26 29 30
NE                   : 43
NOT                  : 46
NUMBER               : 8 11
OR                   : 50
RBRA                 : 17 25 25 34 35 59
RCUR                 : 18 29 30
RIMP                 : 57
RPAR                 : 22 25 26 60
SHARP                : 8 9
STRING               : 9
SUB                  : 48 53
XOR                  : 51
error                : 

Nonterminals, with rules where they appear

array                : 18 19
array_buffer         : 13
array_index          : 21
array_item           : 19 20
code                 : 1 2
condition            : 36 37
conditions           : 29 36
def_array            : 6
def_const            : 5
def_restr            : 7
domain               : 29 30
expr                 : 25 26 38 38 39 39 40 40 41 41 42 42 43 43 44 46 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60
index                : 15 16
literal              : 10 17 21 23 24 25 34 34 34 35 35 45
literal_seq          : 22 23
loop                 : 27 28
loops                : 25 26 27
quant                : 29 30
shape                : 13 14 15
start                : 0
stmt                 : 2 3
sys_config           : 4

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . code
    (2) code -> . code stmt
    (3) code -> . stmt
    (4) stmt -> . sys_config ENDL
    (5) stmt -> . def_const ENDL
    (6) stmt -> . def_array ENDL
    (7) stmt -> . def_restr ENDL
    (8) sys_config -> . SHARP NAME DOTS NUMBER
    (9) sys_config -> . SHARP NAME DOTS STRING
    (10) def_const -> . NAME ASSIGN literal
    (13) def_array -> . NAME shape ASSIGN array_buffer
    (14) def_array -> . NAME shape
    (25) def_restr -> . LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops expr
    (26) def_restr -> . LPAR NAME RPAR NAME DOTS loops expr

    SHARP           shift and go to state 8
    NAME            shift and go to state 9
    LPAR            shift and go to state 10

    start                          shift and go to state 1
    code                           shift and go to state 2
    stmt                           shift and go to state 3
    sys_config                     shift and go to state 4
    def_const                      shift and go to state 5
    def_array                      shift and go to state 6
    def_restr                      shift and go to state 7

state 1

    (0) S' -> start .



state 2

    (1) start -> code .
    (2) code -> code . stmt
    (4) stmt -> . sys_config ENDL
    (5) stmt -> . def_const ENDL
    (6) stmt -> . def_array ENDL
    (7) stmt -> . def_restr ENDL
    (8) sys_config -> . SHARP NAME DOTS NUMBER
    (9) sys_config -> . SHARP NAME DOTS STRING
    (10) def_const -> . NAME ASSIGN literal
    (13) def_array -> . NAME shape ASSIGN array_buffer
    (14) def_array -> . NAME shape
    (25) def_restr -> . LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops expr
    (26) def_restr -> . LPAR NAME RPAR NAME DOTS loops expr

    $end            reduce using rule 1 (start -> code .)
    SHARP           shift and go to state 8
    NAME            shift and go to state 9
    LPAR            shift and go to state 10

    stmt                           shift and go to state 11
    sys_config                     shift and go to state 4
    def_const                      shift and go to state 5
    def_array                      shift and go to state 6
    def_restr                      shift and go to state 7

state 3

    (3) code -> stmt .

    SHARP           reduce using rule 3 (code -> stmt .)
    NAME            reduce using rule 3 (code -> stmt .)
    LPAR            reduce using rule 3 (code -> stmt .)
    $end            reduce using rule 3 (code -> stmt .)


state 4

    (4) stmt -> sys_config . ENDL

    ENDL            shift and go to state 12


state 5

    (5) stmt -> def_const . ENDL

    ENDL            shift and go to state 13


state 6

    (6) stmt -> def_array . ENDL

    ENDL            shift and go to state 14


state 7

    (7) stmt -> def_restr . ENDL

    ENDL            shift and go to state 15


state 8

    (8) sys_config -> SHARP . NAME DOTS NUMBER
    (9) sys_config -> SHARP . NAME DOTS STRING

    NAME            shift and go to state 16


state 9

    (10) def_const -> NAME . ASSIGN literal
    (13) def_array -> NAME . shape ASSIGN array_buffer
    (14) def_array -> NAME . shape
    (15) shape -> . shape index
    (16) shape -> . index
    (17) index -> . LBRA literal RBRA

    ASSIGN          shift and go to state 17
    LBRA            shift and go to state 20

    shape                          shift and go to state 18
    index                          shift and go to state 19

state 10

    (25) def_restr -> LPAR . NAME RPAR NAME RBRA literal RBRA DOTS loops expr
    (26) def_restr -> LPAR . NAME RPAR NAME DOTS loops expr

    NAME            shift and go to state 21


state 11

    (2) code -> code stmt .

    SHARP           reduce using rule 2 (code -> code stmt .)
    NAME            reduce using rule 2 (code -> code stmt .)
    LPAR            reduce using rule 2 (code -> code stmt .)
    $end            reduce using rule 2 (code -> code stmt .)


state 12

    (4) stmt -> sys_config ENDL .

    SHARP           reduce using rule 4 (stmt -> sys_config ENDL .)
    NAME            reduce using rule 4 (stmt -> sys_config ENDL .)
    LPAR            reduce using rule 4 (stmt -> sys_config ENDL .)
    $end            reduce using rule 4 (stmt -> sys_config ENDL .)


state 13

    (5) stmt -> def_const ENDL .

    SHARP           reduce using rule 5 (stmt -> def_const ENDL .)
    NAME            reduce using rule 5 (stmt -> def_const ENDL .)
    LPAR            reduce using rule 5 (stmt -> def_const ENDL .)
    $end            reduce using rule 5 (stmt -> def_const ENDL .)


state 14

    (6) stmt -> def_array ENDL .

    SHARP           reduce using rule 6 (stmt -> def_array ENDL .)
    NAME            reduce using rule 6 (stmt -> def_array ENDL .)
    LPAR            reduce using rule 6 (stmt -> def_array ENDL .)
    $end            reduce using rule 6 (stmt -> def_array ENDL .)


state 15

    (7) stmt -> def_restr ENDL .

    SHARP           reduce using rule 7 (stmt -> def_restr ENDL .)
    NAME            reduce using rule 7 (stmt -> def_restr ENDL .)
    LPAR            reduce using rule 7 (stmt -> def_restr ENDL .)
    $end            reduce using rule 7 (stmt -> def_restr ENDL .)


state 16

    (8) sys_config -> SHARP NAME . DOTS NUMBER
    (9) sys_config -> SHARP NAME . DOTS STRING

    DOTS            shift and go to state 22


state 17

    (10) def_const -> NAME ASSIGN . literal
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 24

state 18

    (13) def_array -> NAME shape . ASSIGN array_buffer
    (14) def_array -> NAME shape .
    (15) shape -> shape . index
    (17) index -> . LBRA literal RBRA

    ASSIGN          shift and go to state 26
    ENDL            reduce using rule 14 (def_array -> NAME shape .)
    LBRA            shift and go to state 20

    index                          shift and go to state 27

state 19

    (16) shape -> index .

    ASSIGN          reduce using rule 16 (shape -> index .)
    LBRA            reduce using rule 16 (shape -> index .)
    ENDL            reduce using rule 16 (shape -> index .)


state 20

    (17) index -> LBRA . literal RBRA
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 28

state 21

    (25) def_restr -> LPAR NAME . RPAR NAME RBRA literal RBRA DOTS loops expr
    (26) def_restr -> LPAR NAME . RPAR NAME DOTS loops expr

    RPAR            shift and go to state 29


state 22

    (8) sys_config -> SHARP NAME DOTS . NUMBER
    (9) sys_config -> SHARP NAME DOTS . STRING

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31


state 23

    (12) literal -> NAME .

    ENDL            reduce using rule 12 (literal -> NAME .)
    RBRA            reduce using rule 12 (literal -> NAME .)
    RPAR            reduce using rule 12 (literal -> NAME .)
    COMMA           reduce using rule 12 (literal -> NAME .)
    RCUR            reduce using rule 12 (literal -> NAME .)
    AND             reduce using rule 12 (literal -> NAME .)
    OR              reduce using rule 12 (literal -> NAME .)
    XOR             reduce using rule 12 (literal -> NAME .)
    ADD             reduce using rule 12 (literal -> NAME .)
    SUB             reduce using rule 12 (literal -> NAME .)
    MUL             reduce using rule 12 (literal -> NAME .)
    DIV             reduce using rule 12 (literal -> NAME .)
    IMP             reduce using rule 12 (literal -> NAME .)
    RIMP            reduce using rule 12 (literal -> NAME .)
    IFF             reduce using rule 12 (literal -> NAME .)
    LBRA            reduce using rule 12 (literal -> NAME .)
    EQ              reduce using rule 12 (literal -> NAME .)
    GT              reduce using rule 12 (literal -> NAME .)
    LT              reduce using rule 12 (literal -> NAME .)
    GE              reduce using rule 12 (literal -> NAME .)
    LE              reduce using rule 12 (literal -> NAME .)
    NE              reduce using rule 12 (literal -> NAME .)
    DOTS            reduce using rule 12 (literal -> NAME .)


state 24

    (10) def_const -> NAME ASSIGN literal .

    ENDL            reduce using rule 10 (def_const -> NAME ASSIGN literal .)


state 25

    (11) literal -> NUMBER .

    ENDL            reduce using rule 11 (literal -> NUMBER .)
    RBRA            reduce using rule 11 (literal -> NUMBER .)
    RPAR            reduce using rule 11 (literal -> NUMBER .)
    COMMA           reduce using rule 11 (literal -> NUMBER .)
    RCUR            reduce using rule 11 (literal -> NUMBER .)
    AND             reduce using rule 11 (literal -> NUMBER .)
    OR              reduce using rule 11 (literal -> NUMBER .)
    XOR             reduce using rule 11 (literal -> NUMBER .)
    ADD             reduce using rule 11 (literal -> NUMBER .)
    SUB             reduce using rule 11 (literal -> NUMBER .)
    MUL             reduce using rule 11 (literal -> NUMBER .)
    DIV             reduce using rule 11 (literal -> NUMBER .)
    IMP             reduce using rule 11 (literal -> NUMBER .)
    RIMP            reduce using rule 11 (literal -> NUMBER .)
    IFF             reduce using rule 11 (literal -> NUMBER .)
    LBRA            reduce using rule 11 (literal -> NUMBER .)
    EQ              reduce using rule 11 (literal -> NUMBER .)
    GT              reduce using rule 11 (literal -> NUMBER .)
    LT              reduce using rule 11 (literal -> NUMBER .)
    GE              reduce using rule 11 (literal -> NUMBER .)
    LE              reduce using rule 11 (literal -> NUMBER .)
    NE              reduce using rule 11 (literal -> NUMBER .)
    DOTS            reduce using rule 11 (literal -> NUMBER .)


state 26

    (13) def_array -> NAME shape ASSIGN . array_buffer
    (18) array_buffer -> . LCUR array RCUR

    LCUR            shift and go to state 33

    array_buffer                   shift and go to state 32

state 27

    (15) shape -> shape index .

    ASSIGN          reduce using rule 15 (shape -> shape index .)
    LBRA            reduce using rule 15 (shape -> shape index .)
    ENDL            reduce using rule 15 (shape -> shape index .)


state 28

    (17) index -> LBRA literal . RBRA

    RBRA            shift and go to state 34


state 29

    (25) def_restr -> LPAR NAME RPAR . NAME RBRA literal RBRA DOTS loops expr
    (26) def_restr -> LPAR NAME RPAR . NAME DOTS loops expr

    NAME            shift and go to state 35


state 30

    (8) sys_config -> SHARP NAME DOTS NUMBER .

    ENDL            reduce using rule 8 (sys_config -> SHARP NAME DOTS NUMBER .)


state 31

    (9) sys_config -> SHARP NAME DOTS STRING .

    ENDL            reduce using rule 9 (sys_config -> SHARP NAME DOTS STRING .)


state 32

    (13) def_array -> NAME shape ASSIGN array_buffer .

    ENDL            reduce using rule 13 (def_array -> NAME shape ASSIGN array_buffer .)


state 33

    (18) array_buffer -> LCUR . array RCUR
    (19) array -> . array COMMA array_item
    (20) array -> . array_item
    (21) array_item -> . array_index DOTS literal
    (22) array_index -> . LPAR literal_seq RPAR

    LPAR            shift and go to state 39

    array                          shift and go to state 36
    array_item                     shift and go to state 37
    array_index                    shift and go to state 38

state 34

    (17) index -> LBRA literal RBRA .

    ASSIGN          reduce using rule 17 (index -> LBRA literal RBRA .)
    LBRA            reduce using rule 17 (index -> LBRA literal RBRA .)
    ENDL            reduce using rule 17 (index -> LBRA literal RBRA .)


state 35

    (25) def_restr -> LPAR NAME RPAR NAME . RBRA literal RBRA DOTS loops expr
    (26) def_restr -> LPAR NAME RPAR NAME . DOTS loops expr

    RBRA            shift and go to state 40
    DOTS            shift and go to state 41


state 36

    (18) array_buffer -> LCUR array . RCUR
    (19) array -> array . COMMA array_item

    RCUR            shift and go to state 42
    COMMA           shift and go to state 43


state 37

    (20) array -> array_item .

    RCUR            reduce using rule 20 (array -> array_item .)
    COMMA           reduce using rule 20 (array -> array_item .)


state 38

    (21) array_item -> array_index . DOTS literal

    DOTS            shift and go to state 44


state 39

    (22) array_index -> LPAR . literal_seq RPAR
    (23) literal_seq -> . literal_seq COMMA literal
    (24) literal_seq -> . literal
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal_seq                    shift and go to state 45
    literal                        shift and go to state 46

state 40

    (25) def_restr -> LPAR NAME RPAR NAME RBRA . literal RBRA DOTS loops expr
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 47

state 41

    (26) def_restr -> LPAR NAME RPAR NAME DOTS . loops expr
    (27) loops -> . loops loop
    (28) loops -> . loop
    (29) loop -> . quant LCUR NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> . quant LCUR NAME ASSIGN domain RCUR
    (31) quant -> . FORALL
    (32) quant -> . EXISTS
    (33) quant -> . EXISTS_ONE

    FORALL          shift and go to state 51
    EXISTS          shift and go to state 52
    EXISTS_ONE      shift and go to state 53

    loops                          shift and go to state 48
    loop                           shift and go to state 49
    quant                          shift and go to state 50

state 42

    (18) array_buffer -> LCUR array RCUR .

    ENDL            reduce using rule 18 (array_buffer -> LCUR array RCUR .)


state 43

    (19) array -> array COMMA . array_item
    (21) array_item -> . array_index DOTS literal
    (22) array_index -> . LPAR literal_seq RPAR

    LPAR            shift and go to state 39

    array_item                     shift and go to state 54
    array_index                    shift and go to state 38

state 44

    (21) array_item -> array_index DOTS . literal
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 55

state 45

    (22) array_index -> LPAR literal_seq . RPAR
    (23) literal_seq -> literal_seq . COMMA literal

    RPAR            shift and go to state 56
    COMMA           shift and go to state 57


state 46

    (24) literal_seq -> literal .

    RPAR            reduce using rule 24 (literal_seq -> literal .)
    COMMA           reduce using rule 24 (literal_seq -> literal .)


state 47

    (25) def_restr -> LPAR NAME RPAR NAME RBRA literal . RBRA DOTS loops expr

    RBRA            shift and go to state 58


state 48

    (26) def_restr -> LPAR NAME RPAR NAME DOTS loops . expr
    (27) loops -> loops . loop
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (29) loop -> . quant LCUR NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> . quant LCUR NAME ASSIGN domain RCUR
    (11) literal -> . NUMBER
    (12) literal -> . NAME
    (31) quant -> . FORALL
    (32) quant -> . EXISTS
    (33) quant -> . EXISTS_ONE

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23
    FORALL          shift and go to state 51
    EXISTS          shift and go to state 52
    EXISTS_ONE      shift and go to state 53

    expr                           shift and go to state 60
    loop                           shift and go to state 61
    literal                        shift and go to state 62
    quant                          shift and go to state 50

state 49

    (28) loops -> loop .

    NOT             reduce using rule 28 (loops -> loop .)
    ADD             reduce using rule 28 (loops -> loop .)
    SUB             reduce using rule 28 (loops -> loop .)
    LPAR            reduce using rule 28 (loops -> loop .)
    NUMBER          reduce using rule 28 (loops -> loop .)
    NAME            reduce using rule 28 (loops -> loop .)
    FORALL          reduce using rule 28 (loops -> loop .)
    EXISTS          reduce using rule 28 (loops -> loop .)
    EXISTS_ONE      reduce using rule 28 (loops -> loop .)


state 50

    (29) loop -> quant . LCUR NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> quant . LCUR NAME ASSIGN domain RCUR

    LCUR            shift and go to state 66


state 51

    (31) quant -> FORALL .

    LCUR            reduce using rule 31 (quant -> FORALL .)


state 52

    (32) quant -> EXISTS .

    LCUR            reduce using rule 32 (quant -> EXISTS .)


state 53

    (33) quant -> EXISTS_ONE .

    LCUR            reduce using rule 33 (quant -> EXISTS_ONE .)


state 54

    (19) array -> array COMMA array_item .

    RCUR            reduce using rule 19 (array -> array COMMA array_item .)
    COMMA           reduce using rule 19 (array -> array COMMA array_item .)


state 55

    (21) array_item -> array_index DOTS literal .

    RCUR            reduce using rule 21 (array_item -> array_index DOTS literal .)
    COMMA           reduce using rule 21 (array_item -> array_index DOTS literal .)


state 56

    (22) array_index -> LPAR literal_seq RPAR .

    DOTS            reduce using rule 22 (array_index -> LPAR literal_seq RPAR .)


state 57

    (23) literal_seq -> literal_seq COMMA . literal
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 67

state 58

    (25) def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA . DOTS loops expr

    DOTS            shift and go to state 68


state 59

    (60) expr -> LPAR . expr RPAR
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 69
    literal                        shift and go to state 62

state 60

    (26) def_restr -> LPAR NAME RPAR NAME DOTS loops expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ENDL            reduce using rule 26 (def_restr -> LPAR NAME RPAR NAME DOTS loops expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 61

    (27) loops -> loops loop .

    NOT             reduce using rule 27 (loops -> loops loop .)
    ADD             reduce using rule 27 (loops -> loops loop .)
    SUB             reduce using rule 27 (loops -> loops loop .)
    LPAR            reduce using rule 27 (loops -> loops loop .)
    NUMBER          reduce using rule 27 (loops -> loops loop .)
    NAME            reduce using rule 27 (loops -> loops loop .)
    FORALL          reduce using rule 27 (loops -> loops loop .)
    EXISTS          reduce using rule 27 (loops -> loops loop .)
    EXISTS_ONE      reduce using rule 27 (loops -> loops loop .)


state 62

    (45) expr -> literal .

    AND             reduce using rule 45 (expr -> literal .)
    OR              reduce using rule 45 (expr -> literal .)
    XOR             reduce using rule 45 (expr -> literal .)
    ADD             reduce using rule 45 (expr -> literal .)
    SUB             reduce using rule 45 (expr -> literal .)
    MUL             reduce using rule 45 (expr -> literal .)
    DIV             reduce using rule 45 (expr -> literal .)
    IMP             reduce using rule 45 (expr -> literal .)
    RIMP            reduce using rule 45 (expr -> literal .)
    IFF             reduce using rule 45 (expr -> literal .)
    LBRA            reduce using rule 45 (expr -> literal .)
    ENDL            reduce using rule 45 (expr -> literal .)
    RPAR            reduce using rule 45 (expr -> literal .)
    RBRA            reduce using rule 45 (expr -> literal .)
    EQ              reduce using rule 45 (expr -> literal .)
    GT              reduce using rule 45 (expr -> literal .)
    LT              reduce using rule 45 (expr -> literal .)
    GE              reduce using rule 45 (expr -> literal .)
    LE              reduce using rule 45 (expr -> literal .)
    NE              reduce using rule 45 (expr -> literal .)
    RCUR            reduce using rule 45 (expr -> literal .)
    COMMA           reduce using rule 45 (expr -> literal .)


state 63

    (46) expr -> NOT . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 81
    literal                        shift and go to state 62

state 64

    (47) expr -> ADD . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 82
    literal                        shift and go to state 62

state 65

    (48) expr -> SUB . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 83
    literal                        shift and go to state 62

state 66

    (29) loop -> quant LCUR . NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> quant LCUR . NAME ASSIGN domain RCUR

    NAME            shift and go to state 84


state 67

    (23) literal_seq -> literal_seq COMMA literal .

    RPAR            reduce using rule 23 (literal_seq -> literal_seq COMMA literal .)
    COMMA           reduce using rule 23 (literal_seq -> literal_seq COMMA literal .)


state 68

    (25) def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA DOTS . loops expr
    (27) loops -> . loops loop
    (28) loops -> . loop
    (29) loop -> . quant LCUR NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> . quant LCUR NAME ASSIGN domain RCUR
    (31) quant -> . FORALL
    (32) quant -> . EXISTS
    (33) quant -> . EXISTS_ONE

    FORALL          shift and go to state 51
    EXISTS          shift and go to state 52
    EXISTS_ONE      shift and go to state 53

    loops                          shift and go to state 85
    loop                           shift and go to state 49
    quant                          shift and go to state 50

state 69

    (60) expr -> LPAR expr . RPAR
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RPAR            shift and go to state 86
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 70

    (49) expr -> expr AND . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 87
    literal                        shift and go to state 62

state 71

    (50) expr -> expr OR . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 88
    literal                        shift and go to state 62

state 72

    (51) expr -> expr XOR . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 89
    literal                        shift and go to state 62

state 73

    (52) expr -> expr ADD . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 90
    literal                        shift and go to state 62

state 74

    (53) expr -> expr SUB . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 91
    literal                        shift and go to state 62

state 75

    (54) expr -> expr MUL . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 92
    literal                        shift and go to state 62

state 76

    (55) expr -> expr DIV . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 93
    literal                        shift and go to state 62

state 77

    (56) expr -> expr IMP . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 94
    literal                        shift and go to state 62

state 78

    (57) expr -> expr RIMP . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 95
    literal                        shift and go to state 62

state 79

    (58) expr -> expr IFF . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 96
    literal                        shift and go to state 62

state 80

    (59) expr -> expr LBRA . expr RBRA
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 97
    literal                        shift and go to state 62

state 81

    (46) expr -> NOT expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    AND             reduce using rule 46 (expr -> NOT expr .)
    OR              reduce using rule 46 (expr -> NOT expr .)
    XOR             reduce using rule 46 (expr -> NOT expr .)
    ADD             reduce using rule 46 (expr -> NOT expr .)
    SUB             reduce using rule 46 (expr -> NOT expr .)
    MUL             reduce using rule 46 (expr -> NOT expr .)
    DIV             reduce using rule 46 (expr -> NOT expr .)
    LBRA            reduce using rule 46 (expr -> NOT expr .)
    ENDL            reduce using rule 46 (expr -> NOT expr .)
    RPAR            reduce using rule 46 (expr -> NOT expr .)
    RBRA            reduce using rule 46 (expr -> NOT expr .)
    EQ              reduce using rule 46 (expr -> NOT expr .)
    GT              reduce using rule 46 (expr -> NOT expr .)
    LT              reduce using rule 46 (expr -> NOT expr .)
    GE              reduce using rule 46 (expr -> NOT expr .)
    LE              reduce using rule 46 (expr -> NOT expr .)
    NE              reduce using rule 46 (expr -> NOT expr .)
    RCUR            reduce using rule 46 (expr -> NOT expr .)
    COMMA           reduce using rule 46 (expr -> NOT expr .)
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! IMP             [ reduce using rule 46 (expr -> NOT expr .) ]
  ! RIMP            [ reduce using rule 46 (expr -> NOT expr .) ]
  ! IFF             [ reduce using rule 46 (expr -> NOT expr .) ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 82

    (47) expr -> ADD expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 47 (expr -> ADD expr .)
    SUB             reduce using rule 47 (expr -> ADD expr .)
    LBRA            reduce using rule 47 (expr -> ADD expr .)
    ENDL            reduce using rule 47 (expr -> ADD expr .)
    RPAR            reduce using rule 47 (expr -> ADD expr .)
    RBRA            reduce using rule 47 (expr -> ADD expr .)
    EQ              reduce using rule 47 (expr -> ADD expr .)
    GT              reduce using rule 47 (expr -> ADD expr .)
    LT              reduce using rule 47 (expr -> ADD expr .)
    GE              reduce using rule 47 (expr -> ADD expr .)
    LE              reduce using rule 47 (expr -> ADD expr .)
    NE              reduce using rule 47 (expr -> ADD expr .)
    RCUR            reduce using rule 47 (expr -> ADD expr .)
    COMMA           reduce using rule 47 (expr -> ADD expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! OR              [ reduce using rule 47 (expr -> ADD expr .) ]
  ! XOR             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! MUL             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! DIV             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! IMP             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! RIMP            [ reduce using rule 47 (expr -> ADD expr .) ]
  ! IFF             [ reduce using rule 47 (expr -> ADD expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! LBRA            [ shift and go to state 80 ]


state 83

    (48) expr -> SUB expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 48 (expr -> SUB expr .)
    SUB             reduce using rule 48 (expr -> SUB expr .)
    LBRA            reduce using rule 48 (expr -> SUB expr .)
    ENDL            reduce using rule 48 (expr -> SUB expr .)
    RPAR            reduce using rule 48 (expr -> SUB expr .)
    RBRA            reduce using rule 48 (expr -> SUB expr .)
    EQ              reduce using rule 48 (expr -> SUB expr .)
    GT              reduce using rule 48 (expr -> SUB expr .)
    LT              reduce using rule 48 (expr -> SUB expr .)
    GE              reduce using rule 48 (expr -> SUB expr .)
    LE              reduce using rule 48 (expr -> SUB expr .)
    NE              reduce using rule 48 (expr -> SUB expr .)
    RCUR            reduce using rule 48 (expr -> SUB expr .)
    COMMA           reduce using rule 48 (expr -> SUB expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! OR              [ reduce using rule 48 (expr -> SUB expr .) ]
  ! XOR             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! MUL             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! DIV             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! IMP             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! RIMP            [ reduce using rule 48 (expr -> SUB expr .) ]
  ! IFF             [ reduce using rule 48 (expr -> SUB expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! LBRA            [ shift and go to state 80 ]


state 84

    (29) loop -> quant LCUR NAME . ASSIGN domain COMMA conditions RCUR
    (30) loop -> quant LCUR NAME . ASSIGN domain RCUR

    ASSIGN          shift and go to state 98


state 85

    (25) def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops . expr
    (27) loops -> loops . loop
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (29) loop -> . quant LCUR NAME ASSIGN domain COMMA conditions RCUR
    (30) loop -> . quant LCUR NAME ASSIGN domain RCUR
    (11) literal -> . NUMBER
    (12) literal -> . NAME
    (31) quant -> . FORALL
    (32) quant -> . EXISTS
    (33) quant -> . EXISTS_ONE

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23
    FORALL          shift and go to state 51
    EXISTS          shift and go to state 52
    EXISTS_ONE      shift and go to state 53

    literal                        shift and go to state 62
    expr                           shift and go to state 99
    loop                           shift and go to state 61
    quant                          shift and go to state 50

state 86

    (60) expr -> LPAR expr RPAR .

    AND             reduce using rule 60 (expr -> LPAR expr RPAR .)
    OR              reduce using rule 60 (expr -> LPAR expr RPAR .)
    XOR             reduce using rule 60 (expr -> LPAR expr RPAR .)
    ADD             reduce using rule 60 (expr -> LPAR expr RPAR .)
    SUB             reduce using rule 60 (expr -> LPAR expr RPAR .)
    MUL             reduce using rule 60 (expr -> LPAR expr RPAR .)
    DIV             reduce using rule 60 (expr -> LPAR expr RPAR .)
    IMP             reduce using rule 60 (expr -> LPAR expr RPAR .)
    RIMP            reduce using rule 60 (expr -> LPAR expr RPAR .)
    IFF             reduce using rule 60 (expr -> LPAR expr RPAR .)
    LBRA            reduce using rule 60 (expr -> LPAR expr RPAR .)
    ENDL            reduce using rule 60 (expr -> LPAR expr RPAR .)
    RPAR            reduce using rule 60 (expr -> LPAR expr RPAR .)
    RBRA            reduce using rule 60 (expr -> LPAR expr RPAR .)
    EQ              reduce using rule 60 (expr -> LPAR expr RPAR .)
    GT              reduce using rule 60 (expr -> LPAR expr RPAR .)
    LT              reduce using rule 60 (expr -> LPAR expr RPAR .)
    GE              reduce using rule 60 (expr -> LPAR expr RPAR .)
    LE              reduce using rule 60 (expr -> LPAR expr RPAR .)
    NE              reduce using rule 60 (expr -> LPAR expr RPAR .)
    RCUR            reduce using rule 60 (expr -> LPAR expr RPAR .)
    COMMA           reduce using rule 60 (expr -> LPAR expr RPAR .)


state 87

    (49) expr -> expr AND expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    AND             reduce using rule 49 (expr -> expr AND expr .)
    OR              reduce using rule 49 (expr -> expr AND expr .)
    XOR             reduce using rule 49 (expr -> expr AND expr .)
    ADD             reduce using rule 49 (expr -> expr AND expr .)
    SUB             reduce using rule 49 (expr -> expr AND expr .)
    MUL             reduce using rule 49 (expr -> expr AND expr .)
    DIV             reduce using rule 49 (expr -> expr AND expr .)
    LBRA            reduce using rule 49 (expr -> expr AND expr .)
    ENDL            reduce using rule 49 (expr -> expr AND expr .)
    RPAR            reduce using rule 49 (expr -> expr AND expr .)
    RBRA            reduce using rule 49 (expr -> expr AND expr .)
    EQ              reduce using rule 49 (expr -> expr AND expr .)
    GT              reduce using rule 49 (expr -> expr AND expr .)
    LT              reduce using rule 49 (expr -> expr AND expr .)
    GE              reduce using rule 49 (expr -> expr AND expr .)
    LE              reduce using rule 49 (expr -> expr AND expr .)
    NE              reduce using rule 49 (expr -> expr AND expr .)
    RCUR            reduce using rule 49 (expr -> expr AND expr .)
    COMMA           reduce using rule 49 (expr -> expr AND expr .)
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! IMP             [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! RIMP            [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! IFF             [ reduce using rule 49 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 88

    (50) expr -> expr OR expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    OR              reduce using rule 50 (expr -> expr OR expr .)
    XOR             reduce using rule 50 (expr -> expr OR expr .)
    ADD             reduce using rule 50 (expr -> expr OR expr .)
    SUB             reduce using rule 50 (expr -> expr OR expr .)
    MUL             reduce using rule 50 (expr -> expr OR expr .)
    DIV             reduce using rule 50 (expr -> expr OR expr .)
    LBRA            reduce using rule 50 (expr -> expr OR expr .)
    ENDL            reduce using rule 50 (expr -> expr OR expr .)
    RPAR            reduce using rule 50 (expr -> expr OR expr .)
    RBRA            reduce using rule 50 (expr -> expr OR expr .)
    EQ              reduce using rule 50 (expr -> expr OR expr .)
    GT              reduce using rule 50 (expr -> expr OR expr .)
    LT              reduce using rule 50 (expr -> expr OR expr .)
    GE              reduce using rule 50 (expr -> expr OR expr .)
    LE              reduce using rule 50 (expr -> expr OR expr .)
    NE              reduce using rule 50 (expr -> expr OR expr .)
    RCUR            reduce using rule 50 (expr -> expr OR expr .)
    COMMA           reduce using rule 50 (expr -> expr OR expr .)
    AND             shift and go to state 70
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! IMP             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! RIMP            [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! IFF             [ reduce using rule 50 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 89

    (51) expr -> expr XOR expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    OR              reduce using rule 51 (expr -> expr XOR expr .)
    XOR             reduce using rule 51 (expr -> expr XOR expr .)
    ADD             reduce using rule 51 (expr -> expr XOR expr .)
    SUB             reduce using rule 51 (expr -> expr XOR expr .)
    MUL             reduce using rule 51 (expr -> expr XOR expr .)
    DIV             reduce using rule 51 (expr -> expr XOR expr .)
    LBRA            reduce using rule 51 (expr -> expr XOR expr .)
    ENDL            reduce using rule 51 (expr -> expr XOR expr .)
    RPAR            reduce using rule 51 (expr -> expr XOR expr .)
    RBRA            reduce using rule 51 (expr -> expr XOR expr .)
    EQ              reduce using rule 51 (expr -> expr XOR expr .)
    GT              reduce using rule 51 (expr -> expr XOR expr .)
    LT              reduce using rule 51 (expr -> expr XOR expr .)
    GE              reduce using rule 51 (expr -> expr XOR expr .)
    LE              reduce using rule 51 (expr -> expr XOR expr .)
    NE              reduce using rule 51 (expr -> expr XOR expr .)
    RCUR            reduce using rule 51 (expr -> expr XOR expr .)
    COMMA           reduce using rule 51 (expr -> expr XOR expr .)
    AND             shift and go to state 70
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 51 (expr -> expr XOR expr .) ]
  ! IMP             [ reduce using rule 51 (expr -> expr XOR expr .) ]
  ! RIMP            [ reduce using rule 51 (expr -> expr XOR expr .) ]
  ! IFF             [ reduce using rule 51 (expr -> expr XOR expr .) ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 90

    (52) expr -> expr ADD expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 52 (expr -> expr ADD expr .)
    SUB             reduce using rule 52 (expr -> expr ADD expr .)
    LBRA            reduce using rule 52 (expr -> expr ADD expr .)
    ENDL            reduce using rule 52 (expr -> expr ADD expr .)
    RPAR            reduce using rule 52 (expr -> expr ADD expr .)
    RBRA            reduce using rule 52 (expr -> expr ADD expr .)
    EQ              reduce using rule 52 (expr -> expr ADD expr .)
    GT              reduce using rule 52 (expr -> expr ADD expr .)
    LT              reduce using rule 52 (expr -> expr ADD expr .)
    GE              reduce using rule 52 (expr -> expr ADD expr .)
    LE              reduce using rule 52 (expr -> expr ADD expr .)
    NE              reduce using rule 52 (expr -> expr ADD expr .)
    RCUR            reduce using rule 52 (expr -> expr ADD expr .)
    COMMA           reduce using rule 52 (expr -> expr ADD expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! OR              [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! XOR             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! MUL             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! DIV             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! IMP             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! RIMP            [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! IFF             [ reduce using rule 52 (expr -> expr ADD expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! LBRA            [ shift and go to state 80 ]


state 91

    (53) expr -> expr SUB expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 53 (expr -> expr SUB expr .)
    SUB             reduce using rule 53 (expr -> expr SUB expr .)
    LBRA            reduce using rule 53 (expr -> expr SUB expr .)
    ENDL            reduce using rule 53 (expr -> expr SUB expr .)
    RPAR            reduce using rule 53 (expr -> expr SUB expr .)
    RBRA            reduce using rule 53 (expr -> expr SUB expr .)
    EQ              reduce using rule 53 (expr -> expr SUB expr .)
    GT              reduce using rule 53 (expr -> expr SUB expr .)
    LT              reduce using rule 53 (expr -> expr SUB expr .)
    GE              reduce using rule 53 (expr -> expr SUB expr .)
    LE              reduce using rule 53 (expr -> expr SUB expr .)
    NE              reduce using rule 53 (expr -> expr SUB expr .)
    RCUR            reduce using rule 53 (expr -> expr SUB expr .)
    COMMA           reduce using rule 53 (expr -> expr SUB expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! OR              [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! XOR             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! MUL             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! DIV             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! IMP             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! RIMP            [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! IFF             [ reduce using rule 53 (expr -> expr SUB expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! LBRA            [ shift and go to state 80 ]


state 92

    (54) expr -> expr MUL expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 54 (expr -> expr MUL expr .)
    SUB             reduce using rule 54 (expr -> expr MUL expr .)
    MUL             reduce using rule 54 (expr -> expr MUL expr .)
    DIV             reduce using rule 54 (expr -> expr MUL expr .)
    LBRA            reduce using rule 54 (expr -> expr MUL expr .)
    ENDL            reduce using rule 54 (expr -> expr MUL expr .)
    RPAR            reduce using rule 54 (expr -> expr MUL expr .)
    RBRA            reduce using rule 54 (expr -> expr MUL expr .)
    EQ              reduce using rule 54 (expr -> expr MUL expr .)
    GT              reduce using rule 54 (expr -> expr MUL expr .)
    LT              reduce using rule 54 (expr -> expr MUL expr .)
    GE              reduce using rule 54 (expr -> expr MUL expr .)
    LE              reduce using rule 54 (expr -> expr MUL expr .)
    NE              reduce using rule 54 (expr -> expr MUL expr .)
    RCUR            reduce using rule 54 (expr -> expr MUL expr .)
    COMMA           reduce using rule 54 (expr -> expr MUL expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! OR              [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! XOR             [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! IMP             [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! RIMP            [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! IFF             [ reduce using rule 54 (expr -> expr MUL expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 93

    (55) expr -> expr DIV expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ADD             reduce using rule 55 (expr -> expr DIV expr .)
    SUB             reduce using rule 55 (expr -> expr DIV expr .)
    MUL             reduce using rule 55 (expr -> expr DIV expr .)
    DIV             reduce using rule 55 (expr -> expr DIV expr .)
    LBRA            reduce using rule 55 (expr -> expr DIV expr .)
    ENDL            reduce using rule 55 (expr -> expr DIV expr .)
    RPAR            reduce using rule 55 (expr -> expr DIV expr .)
    RBRA            reduce using rule 55 (expr -> expr DIV expr .)
    EQ              reduce using rule 55 (expr -> expr DIV expr .)
    GT              reduce using rule 55 (expr -> expr DIV expr .)
    LT              reduce using rule 55 (expr -> expr DIV expr .)
    GE              reduce using rule 55 (expr -> expr DIV expr .)
    LE              reduce using rule 55 (expr -> expr DIV expr .)
    NE              reduce using rule 55 (expr -> expr DIV expr .)
    RCUR            reduce using rule 55 (expr -> expr DIV expr .)
    COMMA           reduce using rule 55 (expr -> expr DIV expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79

  ! AND             [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! OR              [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! XOR             [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! IMP             [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! RIMP            [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! IFF             [ reduce using rule 55 (expr -> expr DIV expr .) ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! LBRA            [ shift and go to state 80 ]


state 94

    (56) expr -> expr IMP expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    AND             reduce using rule 56 (expr -> expr IMP expr .)
    OR              reduce using rule 56 (expr -> expr IMP expr .)
    XOR             reduce using rule 56 (expr -> expr IMP expr .)
    ADD             reduce using rule 56 (expr -> expr IMP expr .)
    SUB             reduce using rule 56 (expr -> expr IMP expr .)
    MUL             reduce using rule 56 (expr -> expr IMP expr .)
    DIV             reduce using rule 56 (expr -> expr IMP expr .)
    IMP             reduce using rule 56 (expr -> expr IMP expr .)
    RIMP            reduce using rule 56 (expr -> expr IMP expr .)
    IFF             reduce using rule 56 (expr -> expr IMP expr .)
    LBRA            reduce using rule 56 (expr -> expr IMP expr .)
    ENDL            reduce using rule 56 (expr -> expr IMP expr .)
    RPAR            reduce using rule 56 (expr -> expr IMP expr .)
    RBRA            reduce using rule 56 (expr -> expr IMP expr .)
    EQ              reduce using rule 56 (expr -> expr IMP expr .)
    GT              reduce using rule 56 (expr -> expr IMP expr .)
    LT              reduce using rule 56 (expr -> expr IMP expr .)
    GE              reduce using rule 56 (expr -> expr IMP expr .)
    LE              reduce using rule 56 (expr -> expr IMP expr .)
    NE              reduce using rule 56 (expr -> expr IMP expr .)
    RCUR            reduce using rule 56 (expr -> expr IMP expr .)
    COMMA           reduce using rule 56 (expr -> expr IMP expr .)

  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! IMP             [ shift and go to state 77 ]
  ! RIMP            [ shift and go to state 78 ]
  ! IFF             [ shift and go to state 79 ]
  ! LBRA            [ shift and go to state 80 ]


state 95

    (57) expr -> expr RIMP expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    AND             reduce using rule 57 (expr -> expr RIMP expr .)
    OR              reduce using rule 57 (expr -> expr RIMP expr .)
    XOR             reduce using rule 57 (expr -> expr RIMP expr .)
    ADD             reduce using rule 57 (expr -> expr RIMP expr .)
    SUB             reduce using rule 57 (expr -> expr RIMP expr .)
    MUL             reduce using rule 57 (expr -> expr RIMP expr .)
    DIV             reduce using rule 57 (expr -> expr RIMP expr .)
    IMP             reduce using rule 57 (expr -> expr RIMP expr .)
    RIMP            reduce using rule 57 (expr -> expr RIMP expr .)
    IFF             reduce using rule 57 (expr -> expr RIMP expr .)
    LBRA            reduce using rule 57 (expr -> expr RIMP expr .)
    ENDL            reduce using rule 57 (expr -> expr RIMP expr .)
    RPAR            reduce using rule 57 (expr -> expr RIMP expr .)
    RBRA            reduce using rule 57 (expr -> expr RIMP expr .)
    EQ              reduce using rule 57 (expr -> expr RIMP expr .)
    GT              reduce using rule 57 (expr -> expr RIMP expr .)
    LT              reduce using rule 57 (expr -> expr RIMP expr .)
    GE              reduce using rule 57 (expr -> expr RIMP expr .)
    LE              reduce using rule 57 (expr -> expr RIMP expr .)
    NE              reduce using rule 57 (expr -> expr RIMP expr .)
    RCUR            reduce using rule 57 (expr -> expr RIMP expr .)
    COMMA           reduce using rule 57 (expr -> expr RIMP expr .)

  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! IMP             [ shift and go to state 77 ]
  ! RIMP            [ shift and go to state 78 ]
  ! IFF             [ shift and go to state 79 ]
  ! LBRA            [ shift and go to state 80 ]


state 96

    (58) expr -> expr IFF expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    AND             reduce using rule 58 (expr -> expr IFF expr .)
    OR              reduce using rule 58 (expr -> expr IFF expr .)
    XOR             reduce using rule 58 (expr -> expr IFF expr .)
    ADD             reduce using rule 58 (expr -> expr IFF expr .)
    SUB             reduce using rule 58 (expr -> expr IFF expr .)
    MUL             reduce using rule 58 (expr -> expr IFF expr .)
    DIV             reduce using rule 58 (expr -> expr IFF expr .)
    IMP             reduce using rule 58 (expr -> expr IFF expr .)
    RIMP            reduce using rule 58 (expr -> expr IFF expr .)
    IFF             reduce using rule 58 (expr -> expr IFF expr .)
    LBRA            reduce using rule 58 (expr -> expr IFF expr .)
    ENDL            reduce using rule 58 (expr -> expr IFF expr .)
    RPAR            reduce using rule 58 (expr -> expr IFF expr .)
    RBRA            reduce using rule 58 (expr -> expr IFF expr .)
    EQ              reduce using rule 58 (expr -> expr IFF expr .)
    GT              reduce using rule 58 (expr -> expr IFF expr .)
    LT              reduce using rule 58 (expr -> expr IFF expr .)
    GE              reduce using rule 58 (expr -> expr IFF expr .)
    LE              reduce using rule 58 (expr -> expr IFF expr .)
    NE              reduce using rule 58 (expr -> expr IFF expr .)
    RCUR            reduce using rule 58 (expr -> expr IFF expr .)
    COMMA           reduce using rule 58 (expr -> expr IFF expr .)

  ! AND             [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]
  ! XOR             [ shift and go to state 72 ]
  ! ADD             [ shift and go to state 73 ]
  ! SUB             [ shift and go to state 74 ]
  ! MUL             [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]
  ! IMP             [ shift and go to state 77 ]
  ! RIMP            [ shift and go to state 78 ]
  ! IFF             [ shift and go to state 79 ]
  ! LBRA            [ shift and go to state 80 ]


state 97

    (59) expr -> expr LBRA expr . RBRA
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RBRA            shift and go to state 100
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 98

    (29) loop -> quant LCUR NAME ASSIGN . domain COMMA conditions RCUR
    (30) loop -> quant LCUR NAME ASSIGN . domain RCUR
    (34) domain -> . LBRA literal DOTS literal DOTS literal RBRA
    (35) domain -> . LBRA literal DOTS literal RBRA

    LBRA            shift and go to state 102

    domain                         shift and go to state 101

state 99

    (25) def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    ENDL            reduce using rule 25 (def_restr -> LPAR NAME RPAR NAME RBRA literal RBRA DOTS loops expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 100

    (59) expr -> expr LBRA expr RBRA .

    AND             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    OR              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    XOR             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    ADD             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    SUB             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    MUL             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    DIV             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    IMP             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    RIMP            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    IFF             reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    LBRA            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    ENDL            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    RPAR            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    RBRA            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    EQ              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    GT              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    LT              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    GE              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    LE              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    NE              reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    RCUR            reduce using rule 59 (expr -> expr LBRA expr RBRA .)
    COMMA           reduce using rule 59 (expr -> expr LBRA expr RBRA .)


state 101

    (29) loop -> quant LCUR NAME ASSIGN domain . COMMA conditions RCUR
    (30) loop -> quant LCUR NAME ASSIGN domain . RCUR

    COMMA           shift and go to state 103
    RCUR            shift and go to state 104


state 102

    (34) domain -> LBRA . literal DOTS literal DOTS literal RBRA
    (35) domain -> LBRA . literal DOTS literal RBRA
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 105

state 103

    (29) loop -> quant LCUR NAME ASSIGN domain COMMA . conditions RCUR
    (36) conditions -> . conditions COMMA condition
    (37) conditions -> . condition
    (38) condition -> . expr EQ expr
    (39) condition -> . expr GT expr
    (40) condition -> . expr LT expr
    (41) condition -> . expr GE expr
    (42) condition -> . expr LE expr
    (43) condition -> . expr NE expr
    (44) condition -> . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    conditions                     shift and go to state 106
    condition                      shift and go to state 107
    expr                           shift and go to state 108
    literal                        shift and go to state 62

state 104

    (30) loop -> quant LCUR NAME ASSIGN domain RCUR .

    NOT             reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    ADD             reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    SUB             reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    LPAR            reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    NUMBER          reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    NAME            reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    FORALL          reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    EXISTS          reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)
    EXISTS_ONE      reduce using rule 30 (loop -> quant LCUR NAME ASSIGN domain RCUR .)


state 105

    (34) domain -> LBRA literal . DOTS literal DOTS literal RBRA
    (35) domain -> LBRA literal . DOTS literal RBRA

    DOTS            shift and go to state 109


state 106

    (29) loop -> quant LCUR NAME ASSIGN domain COMMA conditions . RCUR
    (36) conditions -> conditions . COMMA condition

    RCUR            shift and go to state 111
    COMMA           shift and go to state 110


state 107

    (37) conditions -> condition .

    RCUR            reduce using rule 37 (conditions -> condition .)
    COMMA           reduce using rule 37 (conditions -> condition .)


state 108

    (38) condition -> expr . EQ expr
    (39) condition -> expr . GT expr
    (40) condition -> expr . LT expr
    (41) condition -> expr . GE expr
    (42) condition -> expr . LE expr
    (43) condition -> expr . NE expr
    (44) condition -> expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    EQ              shift and go to state 112
    GT              shift and go to state 113
    LT              shift and go to state 114
    GE              shift and go to state 115
    LE              shift and go to state 116
    NE              shift and go to state 117
    RCUR            reduce using rule 44 (condition -> expr .)
    COMMA           reduce using rule 44 (condition -> expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 109

    (34) domain -> LBRA literal DOTS . literal DOTS literal RBRA
    (35) domain -> LBRA literal DOTS . literal RBRA
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 118

state 110

    (36) conditions -> conditions COMMA . condition
    (38) condition -> . expr EQ expr
    (39) condition -> . expr GT expr
    (40) condition -> . expr LT expr
    (41) condition -> . expr GE expr
    (42) condition -> . expr LE expr
    (43) condition -> . expr NE expr
    (44) condition -> . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    condition                      shift and go to state 119
    expr                           shift and go to state 108
    literal                        shift and go to state 62

state 111

    (29) loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .

    NOT             reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    ADD             reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    SUB             reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    LPAR            reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    NUMBER          reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    NAME            reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    FORALL          reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    EXISTS          reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)
    EXISTS_ONE      reduce using rule 29 (loop -> quant LCUR NAME ASSIGN domain COMMA conditions RCUR .)


state 112

    (38) condition -> expr EQ . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 120
    literal                        shift and go to state 62

state 113

    (39) condition -> expr GT . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 121
    literal                        shift and go to state 62

state 114

    (40) condition -> expr LT . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 122
    literal                        shift and go to state 62

state 115

    (41) condition -> expr GE . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 123
    literal                        shift and go to state 62

state 116

    (42) condition -> expr LE . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 124
    literal                        shift and go to state 62

state 117

    (43) condition -> expr NE . expr
    (45) expr -> . literal
    (46) expr -> . NOT expr
    (47) expr -> . ADD expr
    (48) expr -> . SUB expr
    (49) expr -> . expr AND expr
    (50) expr -> . expr OR expr
    (51) expr -> . expr XOR expr
    (52) expr -> . expr ADD expr
    (53) expr -> . expr SUB expr
    (54) expr -> . expr MUL expr
    (55) expr -> . expr DIV expr
    (56) expr -> . expr IMP expr
    (57) expr -> . expr RIMP expr
    (58) expr -> . expr IFF expr
    (59) expr -> . expr LBRA expr RBRA
    (60) expr -> . LPAR expr RPAR
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NOT             shift and go to state 63
    ADD             shift and go to state 64
    SUB             shift and go to state 65
    LPAR            shift and go to state 59
    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    expr                           shift and go to state 125
    literal                        shift and go to state 62

state 118

    (34) domain -> LBRA literal DOTS literal . DOTS literal RBRA
    (35) domain -> LBRA literal DOTS literal . RBRA

    DOTS            shift and go to state 126
    RBRA            shift and go to state 127


state 119

    (36) conditions -> conditions COMMA condition .

    RCUR            reduce using rule 36 (conditions -> conditions COMMA condition .)
    COMMA           reduce using rule 36 (conditions -> conditions COMMA condition .)


state 120

    (38) condition -> expr EQ expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 38 (condition -> expr EQ expr .)
    COMMA           reduce using rule 38 (condition -> expr EQ expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 121

    (39) condition -> expr GT expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 39 (condition -> expr GT expr .)
    COMMA           reduce using rule 39 (condition -> expr GT expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 122

    (40) condition -> expr LT expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 40 (condition -> expr LT expr .)
    COMMA           reduce using rule 40 (condition -> expr LT expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 123

    (41) condition -> expr GE expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 41 (condition -> expr GE expr .)
    COMMA           reduce using rule 41 (condition -> expr GE expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 124

    (42) condition -> expr LE expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 42 (condition -> expr LE expr .)
    COMMA           reduce using rule 42 (condition -> expr LE expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 125

    (43) condition -> expr NE expr .
    (49) expr -> expr . AND expr
    (50) expr -> expr . OR expr
    (51) expr -> expr . XOR expr
    (52) expr -> expr . ADD expr
    (53) expr -> expr . SUB expr
    (54) expr -> expr . MUL expr
    (55) expr -> expr . DIV expr
    (56) expr -> expr . IMP expr
    (57) expr -> expr . RIMP expr
    (58) expr -> expr . IFF expr
    (59) expr -> expr . LBRA expr RBRA

    RCUR            reduce using rule 43 (condition -> expr NE expr .)
    COMMA           reduce using rule 43 (condition -> expr NE expr .)
    AND             shift and go to state 70
    OR              shift and go to state 71
    XOR             shift and go to state 72
    ADD             shift and go to state 73
    SUB             shift and go to state 74
    MUL             shift and go to state 75
    DIV             shift and go to state 76
    IMP             shift and go to state 77
    RIMP            shift and go to state 78
    IFF             shift and go to state 79
    LBRA            shift and go to state 80


state 126

    (34) domain -> LBRA literal DOTS literal DOTS . literal RBRA
    (11) literal -> . NUMBER
    (12) literal -> . NAME

    NUMBER          shift and go to state 25
    NAME            shift and go to state 23

    literal                        shift and go to state 128

state 127

    (35) domain -> LBRA literal DOTS literal RBRA .

    COMMA           reduce using rule 35 (domain -> LBRA literal DOTS literal RBRA .)
    RCUR            reduce using rule 35 (domain -> LBRA literal DOTS literal RBRA .)


state 128

    (34) domain -> LBRA literal DOTS literal DOTS literal . RBRA

    RBRA            shift and go to state 129


state 129

    (34) domain -> LBRA literal DOTS literal DOTS literal RBRA .

    COMMA           reduce using rule 34 (domain -> LBRA literal DOTS literal DOTS literal RBRA .)
    RCUR            reduce using rule 34 (domain -> LBRA literal DOTS literal DOTS literal RBRA .)

