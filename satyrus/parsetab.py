
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN COMMA DIV DOTS ENDL EQ EXISTS EXISTS_ONE FORALL GE GT IFF IMP LBRA LCUR LE LPAR LT MUL NAME NE NOT NUMBER OR RBRA RCUR RIMP RPAR SHARP STRING SUB TYPE XOR\n        run : code\n     code : code stmt\n             | stmt\n     stmt : sys_config ENDL\n             | def_const ENDL\n             | def_array ENDL\n     sys_config : SHARP NAME DOTS NUMBER\n                   | SHARP NAME DOTS STRING\n     def_const : NAME ASSIGN literal\n     literal : NUMBER\n                | NAME\n     def_array : NAME shape ASSIGN array_buffer\n                  | NAME shape\n     shape : shape index\n              | index\n     index : LBRA literal RBRA\n     array_buffer : LCUR array RCUR\n     array : array COMMA array_item\n              | array_item\n     array_item : array_index DOTS literal\n     array_index : LPAR literal_seq RPAR\n     literal_seq : literal_seq COMMA literal\n                    | literal\n    '
    
_lr_action_items = {'SHARP':([0,2,3,9,10,11,12,],[7,7,-3,-2,-4,-5,-6,]),'NAME':([0,2,3,7,9,10,11,12,14,17,33,36,42,],[8,8,-3,13,-2,-4,-5,-6,19,19,19,19,19,]),'$end':([1,2,3,9,10,11,12,],[0,-1,-3,-2,-4,-5,-6,]),'ENDL':([4,5,6,15,16,19,20,21,23,25,26,27,29,34,],[10,11,12,-13,-15,-11,-9,-10,-14,-7,-8,-12,-16,-17,]),'ASSIGN':([8,15,16,23,29,],[14,22,-15,-14,-16,]),'LBRA':([8,15,16,23,29,],[17,17,-15,-14,-16,]),'DOTS':([13,32,41,],[18,36,-21,]),'NUMBER':([14,17,18,33,36,42,],[21,21,25,21,21,21,]),'STRING':([18,],[26,]),'RBRA':([19,21,24,],[-11,-10,29,]),'RPAR':([19,21,37,38,43,],[-11,-10,41,-23,-22,]),'COMMA':([19,21,30,31,37,38,39,40,43,],[-11,-10,35,-19,42,-23,-18,-20,-22,]),'RCUR':([19,21,30,31,39,40,],[-11,-10,34,-19,-18,-20,]),'LCUR':([22,],[28,]),'LPAR':([28,35,],[33,33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'code':([0,],[2,]),'stmt':([0,2,],[3,9,]),'sys_config':([0,2,],[4,4,]),'def_const':([0,2,],[5,5,]),'def_array':([0,2,],[6,6,]),'shape':([8,],[15,]),'index':([8,15,],[16,23,]),'literal':([14,17,33,36,42,],[20,24,38,40,43,]),'array_buffer':([22,],[27,]),'array':([28,],[30,]),'array_item':([28,35,],[31,39,]),'array_index':([28,35,],[32,32,]),'literal_seq':([33,],[37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> code','run',1,'p_run','sat_parser.py',11),
  ('code -> code stmt','code',2,'p_code','sat_parser.py',18),
  ('code -> stmt','code',1,'p_code','sat_parser.py',19),
  ('stmt -> sys_config ENDL','stmt',2,'p_stmt','sat_parser.py',27),
  ('stmt -> def_const ENDL','stmt',2,'p_stmt','sat_parser.py',28),
  ('stmt -> def_array ENDL','stmt',2,'p_stmt','sat_parser.py',29),
  ('sys_config -> SHARP NAME DOTS NUMBER','sys_config',4,'p_sys_config','sat_parser.py',34),
  ('sys_config -> SHARP NAME DOTS STRING','sys_config',4,'p_sys_config','sat_parser.py',35),
  ('def_const -> NAME ASSIGN literal','def_const',3,'p_def_const','sat_parser.py',41),
  ('literal -> NUMBER','literal',1,'p_literal','sat_parser.py',47),
  ('literal -> NAME','literal',1,'p_literal','sat_parser.py',48),
  ('def_array -> NAME shape ASSIGN array_buffer','def_array',4,'p_def_array','sat_parser.py',53),
  ('def_array -> NAME shape','def_array',2,'p_def_array','sat_parser.py',54),
  ('shape -> shape index','shape',2,'p_shape','sat_parser.py',65),
  ('shape -> index','shape',1,'p_shape','sat_parser.py',66),
  ('index -> LBRA literal RBRA','index',3,'p_index','sat_parser.py',74),
  ('array_buffer -> LCUR array RCUR','array_buffer',3,'p_array_buffer','sat_parser.py',79),
  ('array -> array COMMA array_item','array',3,'p_array','sat_parser.py',84),
  ('array -> array_item','array',1,'p_array','sat_parser.py',85),
  ('array_item -> array_index DOTS literal','array_item',3,'p_array_item','sat_parser.py',93),
  ('array_index -> LPAR literal_seq RPAR','array_index',3,'p_array_index','sat_parser.py',98),
  ('literal_seq -> literal_seq COMMA literal','literal_seq',3,'p_literal_seq','sat_parser.py',103),
  ('literal_seq -> literal','literal_seq',1,'p_literal_seq','sat_parser.py',104),
]
