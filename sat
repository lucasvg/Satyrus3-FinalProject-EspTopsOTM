#!/usr/env/python
""" :: Satyrus III ::
    =================
"""
## Standard Library
import argparse
import os

## Local
from satlib import load, log, stdout, stderr, stdsys, stream, Source
from satyrus.sat_compiler import SatCompiler
from satyrus.sat_parser import SatParser
from satyrus.sat_types.error import SatError

class Satyrus:

    HOME = os.getcwd()

    CRITICAL_ERROR = os.path.join(HOME, 'assets', 'critical_error.txt')

    bytecode = []

    sco = {}

    @classmethod
    def main(cls, *args, **kwargs):
        stream.set_level(0)
        try:
            cls.source = Source.load(cls.fname)
            stdsys[1] << ":: Source Code ::"
            cls.print_code(cls.source.lines)

            cls.parser = SatParser(cls.source)
            cls.bytecode = cls.parser.parse()
            stdsys[1] << ":: SATyrus bytecode ::"
            cls.print_code(cls.bytecode)

            cls.compiler = SatCompiler(cls.source, cls.parser)
            cls.sco = cls.compiler.compile()
            stdsys[1] << ":: SATyrus Compiled Object ::"
            stdout << cls.sco
        except SatError as sat_error:
            stderr << sat_error
        except Exception as error:
            stdout << load(cls.CRITICAL_ERROR, encoding='utf-8')
            cls.report()
            return
            ## log(error)
            exit(1)

    @classmethod
    def report(cls):
        stdout << ":: Satyrus Report ::"
        stdsys << "Compiler Memory:"
        stdsys << cls.compiler.memory

    @classmethod
    def print_code(cls, code : list):
        nlines = len(code)
        for i, line in enumerate(code, 1):
            stdout[1] << f"{str(i).zfill(len(str(nlines)))} {line}"
        
    @classmethod
    def init(cls, fname):
        cls.fname = fname

    @classmethod
    def debug(cls):
        try:
            cls.main()
        except:
            raise
        finally:
            stdout << (cls.compiler.memory)

if __name__ == '__main__':
    Satyrus.init('source.sat')
    Satyrus.main()